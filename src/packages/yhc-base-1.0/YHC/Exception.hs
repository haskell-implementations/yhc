module YHC.Exception(
        Exception(..),
        ArithException(..),
        AsyncException(..),
        ArrayException(..),
        IOException,

        throw,
        throwIO,
        throwTo,
        catchException,
        evaluate,
        block,
        unblock,

        ExitCode(..)
    ) where

import YHC.Primitive
import YHC.Internal


-- moved from System.Exit to remove cyclic dependency
data ExitCode = ExitSuccess | ExitFailure Int
                deriving (Show)

instance Eq ExitCode where
  ExitSuccess   == ExitSuccess    = True
  ExitFailure a == ExitFailure b  = a == b
  _             == _              = False

catchException :: IO a -> (Exception -> IO a) -> IO a
catchException io handler = _mkIOok2 primCatch
                             (unsafePerformIO io)
                             (\e -> unsafePerformIO (handler e))


throw :: Exception -> a
throw e = primThrow e

throwIO :: Exception -> IO a
throwIO e = _mkIOok1 throw e

throwTo :: ThreadId -> Exception -> IO ()
throwTo id e = _mkIOok3 primThrowTo id e ()

-- I *think* this is the right semantics for evaluate ...
evaluate :: a -> IO a
evaluate a = IO $ \ w -> a `seq` _E a

-- FIXME: should probably do something ...
block :: IO a -> IO a
block io = do
    primBlockExceptions ()
    x <- io
    primUnblockExceptions ()
    return x

unblock :: IO a -> IO a
unblock io = do
    primUnblockExceptions ()
    x <- catchException io $
          \ e -> do primBlockExceptions ()
                    throw e
    primBlockExceptions ()
    return x

-- ------------------------------------------------------------------------
-- Exception datatype and operations

type IOException = IOError

-- |The type of exceptions.  Every kind of system-generated exception
-- has a constructor in the 'Exception' type, and values of other
-- types may be injected into 'Exception' by coercing them to
-- 'Data.Dynamic.Dynamic' (see the section on Dynamic Exceptions:
-- "Control.Exception\#DynamicExceptions").
data Exception
  = ArithException      ArithException
    -- ^Exceptions raised by arithmetic
    -- operations.  (NOTE: GHC currently does not throw
    -- 'ArithException's except for 'DivideByZero').
  | ArrayException  ArrayException
    -- ^Exceptions raised by array-related
    -- operations.  (NOTE: GHC currently does not throw
    -- 'ArrayException's).
  | AssertionFailed String
    -- ^This exception is thrown by the
    -- 'assert' operation when the condition
    -- fails.  The 'String' argument contains the
    -- location of the assertion in the source program.
  | AsyncException  AsyncException
    -- ^Asynchronous exceptions (see section on Asynchronous Exceptions: "Control.Exception\#AsynchronousExceptions").
  | BlockedOnDeadMVar
    -- ^The current thread was executing a call to
    -- 'Control.Concurrent.MVar.takeMVar' that could never return,
    -- because there are no other references to this 'MVar'.
  | BlockedIndefinitely
    -- ^The current thread was waiting to retry an atomic memory transaction
    -- that could never become possible to complete because there are no other
    -- threads referring to any of teh TVars involved.
  | NestedAtomically
    -- ^The runtime detected an attempt to nest one STM transaction
    -- inside another one, presumably due to the use of
    -- 'unsafePeformIO' with 'atomically'.
  | Deadlock
    -- ^There are no runnable threads, so the program is
    -- deadlocked.  The 'Deadlock' exception is
    -- raised in the main thread only (see also: "Control.Concurrent").
-- FIXME:  | DynException    Dynamic
    -- ^Dynamically typed exceptions (see section on Dynamic Exceptions: "Control.Exception\#DynamicExceptions").
  | ErrorCall       String
    -- ^The 'ErrorCall' exception is thrown by 'error'.  The 'String'
    -- argument of 'ErrorCall' is the string passed to 'error' when it was
    -- called.
  | ExitException   ExitCode
    -- ^The 'ExitException' exception is thrown by 'System.Exit.exitWith' (and
    -- 'System.Exit.exitFailure').  The 'ExitCode' argument is the value passed
    -- to 'System.Exit.exitWith'.  An unhandled 'ExitException' exception in the
    -- main thread will cause the program to be terminated with the given
    -- exit code.
  | IOException     IOException
    -- ^These are the standard IO exceptions generated by
    -- Haskell\'s @IO@ operations.  See also "System.IO.Error".
  | NoMethodError       String
    -- ^An attempt was made to invoke a class method which has
    -- no definition in this instance, and there was no default
    -- definition given in the class declaration.  GHC issues a
    -- warning when you compile an instance which has missing
    -- methods.
  | NonTermination
    -- ^The current thread is stuck in an infinite loop.  This
    -- exception may or may not be thrown when the program is
    -- non-terminating.
  | PatternMatchFail    String
    -- ^A pattern matching failure.  The 'String' argument should contain a
    -- descriptive message including the function name, source file
    -- and line number.
  | RecConError     String
    -- ^An attempt was made to evaluate a field of a record
    -- for which no value was given at construction time.  The
    -- 'String' argument gives the location of the
    -- record construction in the source program.
  | RecSelError     String
    -- ^A field selection was attempted on a constructor that
    -- doesn\'t have the requested field.  This can happen with
    -- multi-constructor records when one or more fields are
    -- missing from some of the constructors.  The
    -- 'String' argument gives the location of the
    -- record selection in the source program.
  | RecUpdError     String
    -- ^An attempt was made to update a field in a record,
    -- where the record doesn\'t have the requested field.  This can
    -- only occur with multi-constructor records, when one or more
    -- fields are missing from some of the constructors.  The
    -- 'String' argument gives the location of the
    -- record update in the source program.

-- |The type of arithmetic exceptions
data ArithException
  = Overflow
  | Underflow
  | LossOfPrecision
  | DivideByZero
  | Denormal
  deriving (Eq, Ord)


-- |Asynchronous exceptions
data AsyncException
  = StackOverflow
    -- ^The current thread\'s stack exceeded its limit.
    -- Since an exception has been raised, the thread\'s stack
    -- will certainly be below its limit again, but the
    -- programmer should take remedial action
    -- immediately.
  | HeapOverflow
    -- ^The program\'s heap is reaching its limit, and
    -- the program should take action to reduce the amount of
    -- live data it has. Notes:
    --
    --  * It is undefined which thread receives this exception.
    --
    --  * GHC currently does not throw 'HeapOverflow' exceptions.
  | ThreadKilled
    -- ^This exception is raised by another thread
    -- calling 'Control.Concurrent.killThread', or by the system
    -- if it needs to terminate the thread for some
    -- reason.
  deriving (Eq, Ord)

-- | Exceptions generated by array operations
data ArrayException
  = IndexOutOfBounds    String
    -- ^An attempt was made to index an array outside
    -- its declared bounds.
  | UndefinedElement    String
    -- ^An attempt was made to evaluate an element of an
    -- array that had not been initialized.
  deriving (Eq, Ord)

stackOverflow, heapOverflow :: Exception -- for the RTS
stackOverflow = AsyncException StackOverflow
heapOverflow  = AsyncException HeapOverflow

instance Show ArithException where
  showsPrec _ Overflow        = showString "arithmetic overflow"
  showsPrec _ Underflow       = showString "arithmetic underflow"
  showsPrec _ LossOfPrecision = showString "loss of precision"
  showsPrec _ DivideByZero    = showString "divide by zero"
  showsPrec _ Denormal        = showString "denormal"

instance Show AsyncException where
  showsPrec _ StackOverflow   = showString "stack overflow"
  showsPrec _ HeapOverflow    = showString "heap overflow"
  showsPrec _ ThreadKilled    = showString "thread killed"

instance Show ArrayException where
  showsPrec _ (IndexOutOfBounds s)
    = showString "array index out of range"
    . (if not (null s) then showString ": " . showString s
               else id)
  showsPrec _ (UndefinedElement s)
    = showString "undefined array element"
    . (if not (null s) then showString ": " . showString s
               else id)

instance Show Exception where
  showsPrec _ (IOException err)          = shows err
  showsPrec _ (ArithException err)       = shows err
  showsPrec _ (ArrayException err)       = shows err
  showsPrec _ (ErrorCall err)            = showString err
  showsPrec _ (ExitException err)        = showString "exit: " . shows err
  showsPrec _ (NoMethodError err)        = showString err
  showsPrec _ (PatternMatchFail err)     = showString err
  showsPrec _ (RecSelError err)          = showString err
  showsPrec _ (RecConError err)          = showString err
  showsPrec _ (RecUpdError err)          = showString err
  showsPrec _ (AssertionFailed err)      = showString err
-- FIXME:  showsPrec _ (DynException err)         = showString "exception :: " . showsTypeRep (dynTypeRep err)
  showsPrec _ (AsyncException e)     = shows e
  showsPrec _ (BlockedOnDeadMVar)    = showString "thread blocked indefinitely"
  showsPrec _ (BlockedIndefinitely)  = showString "thread blocked indefinitely"
  showsPrec _ (NestedAtomically)     = showString "Control.Concurrent.STM.atomically was nested"
  showsPrec _ (NonTermination)           = showString "<<loop>>"
  showsPrec _ (Deadlock)                 = showString "<<deadlock>>"

instance Eq Exception where
-- FIXME:  IOException e1      == IOException e2      = e1 == e2
  ArithException e1   == ArithException e2   = e1 == e2
  ArrayException e1   == ArrayException e2   = e1 == e2
  ErrorCall e1        == ErrorCall e2        = e1 == e2
  ExitException e1    == ExitException e2    = e1 == e2
  NoMethodError e1    == NoMethodError e2    = e1 == e2
  PatternMatchFail e1 == PatternMatchFail e2 = e1 == e2
  RecSelError e1      == RecSelError e2      = e1 == e2
  RecConError e1      == RecConError e2      = e1 == e2
  RecUpdError e1      == RecUpdError e2      = e1 == e2
  AssertionFailed e1  == AssertionFailed e2  = e1 == e2
-- FIXME:  DynException _      == DynException _      = False -- incomparable
  AsyncException e1   == AsyncException e2   = e1 == e2
  BlockedOnDeadMVar   == BlockedOnDeadMVar   = True
  NonTermination      == NonTermination      = True
  NestedAtomically    == NestedAtomically    = True
  Deadlock            == Deadlock            = True
  _                   == _                   = False
