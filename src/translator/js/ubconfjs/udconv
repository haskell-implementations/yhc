#!/bin/sh

# --------------------------------------------------------------------------
# This is the script to create the unicode chars property table 
# It is based on the similar script used for basic unicode support
# in Hugs and GHC.
# -------------------------------------------------------------------------

#	The script reads the file from the standard input,
#	and outputs Javascript code into the standard output.
#	The Javascript code contains the chars property table
#	to be accessed from Javascript code compiled from Haskell.

#	Output the file header

echo "/*-------------------------------------------------------------------------"
echo "This is an automatically generated file: do not edit"
echo "Generated by `basename $0` at `date`"
echo "-------------------------------------------------------------------------*/"
echo

#	Define structures. Javascript code will use anonymous object constructors,
#	but the format will be as follows:

cat > /dev/null <<EOF

struct _convrule_ 
{ 
	unsigned int category;
	int possible;
	int updist;
	int lowdist; 
};

struct _charblock_ 
{ 
	int start;
	int length;
	const struct _convrule_ *rule;
};

EOF

#	Convert the stdin file to the Javascript table

awk '
BEGIN {
	FS=";"
	catidx=0
	rulidx=0
	blockidx=0
	cblckidx=0
	blockb=-1
	blockl=0
	digs="0123456789ABCDEF"
	for(i=0;i<16;i++)
	{
		hex[substr(digs,i+1,1)]=i;
	}
}
function h2d(a)
{
	l=length(a)
	acc=0
	for(i=1;i<=l;i++)
	{
		acc=acc*16+hex[substr(a,i,1)];
	}
	return acc
}
function dumpblock(c)
{
	blkd="b:" blockb ",l:" blockl ",r:cR[" rules[blockr] "]"
	blocks[blockidx]=blkd
	blockidx++
	split(blockr,rsp,",")
	if(c==1)
	{
		cblcks[cblckidx]=blkd
		cblckidx++
	}
	blockb=self
	blockl=1
	blockr=rule
}
{
	name=$2
	cat=$3
	self=h2d($1)
	up=h2d($13)
	low=h2d($14)
	convpos=1
	if((up==0)&&(low==0)) convpos=0
	if(up==0) up=self
	if(low==0) low=self
	updist=up-self
	lowdist=low-self
	rule="c:\""cat"\","((convpos==1)?
				("u:" updist ",l:" lowdist):
				("u:0,l:0"))
	if(rules[rule]=="")
	{
		rules[rule]=rulidx;
		rulidx++;
	}
	if(blockb==-1)
	{
		blockb=self
		blockl=1
		blockr=rule
	}
	else
	{
		if (index(name,"First>")!=0)
		{
			dumpblock(convpos)
		}
		else if (index(name,"Last>")!=0)
		{
			blockl+=(self-blockb)
		}
		else if((self==blockb+blockl)&&(rule==blockr)) blockl++
		else
		{
			dumpblock(convpos)
		}
	}
}
END {
	dumpblock(convpos)
	print "var MAX_UNI_CHAR =" self ";"
	print "var NUM_BLOCKS =" blockidx ";"
	print "var NUM_RULES =" rulidx ";"
        print "var cR=Array();"
        print "var aC=Array();"
        print "var cC={ };"
	for(r in rules)
	{
		printf "cR[" rules[r] "]={" r "};\n"
	}
	for(i=0;i<blockidx;i++)
	{
		printf "aC[" i "]={" blocks[i] "};\n"
	}
}
'

# Output binary search in Javascript

cat <<EOF

/* This code is based on http://www.weetbixthecat.com/code/binary-search.js */
/* Comparison function was added to the original implementation             */

Array.prototype.binarySearch = function(item, compar)
{
  var left = -1, 
      right = this.length, 
      mid;
  
  while(right - left > 1)
  {
    mid = (left + right) >>> 1;
    if(compar(this[mid], item) < 0)
      left = mid;
    else
      right = mid;
  }
  
  if(compar(this[right], item)!=0)
    return -(right + 1);
  
  return right;
}
  
/* Comparison function for a character code against a range of characters */

function charng(rng, chr) {
  if (rng.b>chr) return 1;
  if (rng.b+rng.l<=chr) return -1;
  return 0;
}

/* Find a rule for a character code */

function findRule(arr, chr) {
  if (!cC[chr]) {
    var r = arr.binarySearch(chr, charng);
    if (r>=0) cC[chr] = arr[r].r;
    else cC[chr] = {c:"Cn", u:0, l:0};
  }
  return cC[chr];
}

/* Case conversion functions */

function uToUpper(chr) {
  return chr + findRule(aC, chr).u;
}

function uToLower(chr) {
  return chr + findRule(aC, chr).l;
}

/* Functions mapping Unicode categories to Yhc's character classifiers */

function uIsControl(chr) {
  return (findRule(aC, chr).c == 'Cc');
}

function uIsSpace(chr){
  return (findRule(aC, chr).c == 'Zs');
}

function uIsLower(chr){
  return (findRule(aC, chr).c == 'Ll');
}

function uIsDigit(chr){
  return (findRule(aC, chr).c == 'Nd');
}

function uIsUpper(chr) {
  var c = findRule(aC, chr).c;
  return (c == "Lu" || c == "Lt");
}

function uMultCat(arr, chr) {
  function strcmp(s1, s2) {
    if (s1 > s2) return 1;
    if (s1 < s2) return -1
    else return 0;
  }
  return (arr.binarySearch(findRule(aC, chr).c, strcmp) >= 0);
}

function uIsAlpha(chr) {
  return uMultCat(["Ll", "Lm", "Lo", "Lt", "Lu"], chr);
}

function uIsAlNum(chr) {
  return uMultCat(["Ll", "Lm", "Lo", "Lt", "Lu", "Mc", "Me", "Mn", "Nd", "Nl", "No"], chr);
}

/* A shortcut: printable is any non-control and not "Cn" */

function uIsPrint(chr) {
  var c = findRule(aC, chr).c;
  return (c != "Cc" && c != "Cn");
}

EOF

