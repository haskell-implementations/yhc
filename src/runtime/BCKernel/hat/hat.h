#ifndef __hat_h__
#define __hat_h__

#include "../types.h"

/* these structures should mirror what is generated by the compiler */
#ifndef FILE_OFFSET
typedef UInt         FileOffset;
#define FILE_OFFSET
#endif

/* information about a module */

enum {
  HMFL_NONE   = 0x00,
  HMFL_TRACED = 0x01
};

typedef struct _HModule {
  FileOffset         tracePtr;
  Bool               isTrusted;
  char*              name;
  struct _HModule*   parent;
}HModule;

enum {
  HIFL_NONE       = 0x00,
  HIFL_TRUSTED    = 0x01,
  HIFL_CHAR       = 0x02,
  HIFL_INT        = 0x04,
  HIFL_FLOAT      = 0x08,
  HIFL_DOUBLE     = 0x10,
  HIFL_INTEGER    = 0x20,
  HIFL_INVISIBLE  = 0x40
};

/* the information about a function/constructor */
typedef struct _HInfo {
  FileOffset       tracePtr;
  HModule*         module;
  char*            name;
  UInt             flags;
}HInfo;

/* information about a position */
typedef struct _HPos {
  FileOffset      tracePtr;
  HModule*        module;
  UInt            start;
  UInt            end;
}HPos;

/* information about a variable description */
typedef struct _HVarDesc {
  Char*           name;
  HPos            pos;
}HVarDesc;

/* flags for the hnode*/
enum {
  HNFL_UNTRACED   = 0x00,
  HNFL_TRACED     = 0x01,
  HNFL_TRACED_FW  = 0x02,
  HNFL_TRACED_HID = 0x03,
  HNFL_MASK       = 0x03
};



/* a heap node in general */
typedef struct _HNode {
  HUInt        flags;
  HUInt        hadUse;
  void*        data;
}HNode;

#ifdef HAT
#  define INIT_HATNODE(node, pos) ((Node*)node)->hatNode.flags = HNFL_UNTRACED; ((Node*)node)->hatNode.data = (void*)pos
#  define COPY_HATNODE(node, orig) ((Node*)node)->hatNode = ((Node*)orig)->hatNode;
#  define HN_IS_TRACED(node) ((node)->flags != HNFL_UNTRACED)
#else
#  define INIT_HATNODE(node, pos)
#  define COPY_HATNODE(node, orig)
#  define HN_IS_TRACED(node)
#endif

/* the information for an unused node */
typedef struct _HNodeUnutraced{
  Word          flags;
  HPos*         posn;
}HNodeUntraced;

/* a traced node */
typedef struct _HNodeTraced {
  Word          flags;
  FileOffset    offset;
}HNodeTraced;

/* a hat stack entry */
typedef struct _HStackEntry {
  HUInt         flags;
  HUInt         hadUse;
  FileOffset    offset;           /* file offset information */
}HStackEntry;

/* a hat stack frame */
typedef struct _HStackFrame {
  struct _HStackFrame*  fp;
  Word                  unused;
  HStackEntry           cp;
  HStackEntry           up;
}HStackFrame;

#define HSTACK_FRAME_SIZE  (wordsof(HStackFrame)/wordsof(HStackEntry))

#define HSTACK_ENTRY(f,p,u) ((HStackEntry){ (f), (u), (p) })

struct _Node;
struct _PInfo;

#define TSTACK_SIZE      (1024*1024)
#define HAT_MAX_ARGS     256

void hgm_init(char* mainname);
void hgm_exit();

HStackEntry hgm_traceForward(struct _Node* nodeptr);
HStackEntry hgm_traceAp(struct _Node* node, HPos* pos, HStackEntry* args);
HStackEntry hgm_traceCon(struct _Node* node, HPos* pos, HStackEntry* args);
HStackEntry hgm_traceApply(struct _Node* node, HStackEntry fun, Int nargs, HPos* pos, HStackEntry* args);
HStackEntry hgm_traceCase(HStackEntry exp, HPos* pos);
HStackEntry hgm_traceIf(HStackEntry exp, HPos* pos);
HStackEntry hgm_traceGuard(HStackEntry exp, HPos* pos);
HStackEntry hgm_traceNode(struct _Node* node, Bool inTrusted);
HStackEntry hgm_tracePrimAp(HPos* pos, HStackEntry* args, struct _PInfo* pinfo);
HStackEntry hgm_traceVar(struct _Node* node, HVarDesc* desc);
HStackEntry hgm_traceProjection(HPos* pos, HStackEntry exp);

void hgm_primResult(HStackEntry ap, HStackEntry res);

void hgm_eval(struct _Node* current, struct _Node* node);
Bool hgm_return(struct _Node* current, struct _Node* result, Bool andEval);



extern HStackEntry* G_tp;
extern HStackEntry* G_tpBase;

#endif
