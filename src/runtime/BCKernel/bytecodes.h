/* Generated from bytecode.xml */
/* DO NOT EDIT DIRECTLY */
op(0, END_CODE)
op(1, NEED_HEAP_32)
op1(2, NEED_HEAP)
op(3, NEED_STACK_16)
op1(4, NEED_STACK)
op1(5, PUSH_P1)
op2(6, PUSH_P2)
op(7, PUSH_0)
op(8, PUSH_1)
op1(9, PUSH_ZAP_P1)
op2(10, PUSH_ZAP_P2)
op(11, PUSH_ZAP_0)
op(12, PUSH_ZAP_1)
op(13, PUSH_ZAP_2)
op(14, PUSH_ZAP_3)
op1(15, ZAP_STACK_P1)
op2(16, ZAP_STACK_P2)
op1(17, PUSH_ARG)
op(18, PUSH_ARG_0)
op(19, PUSH_ARG_1)
op(20, PUSH_ARG_2)
op(21, PUSH_ARG_3)
op1(22, PUSH_ZAP_ARG)
op(23, PUSH_ZAP_ARG_0)
op(24, PUSH_ZAP_ARG_1)
op(25, PUSH_ZAP_ARG_2)
op(26, PUSH_ZAP_ARG_3)
op1(27, ZAP_ARG)
op(28, ZAP_ARG_0)
op(29, ZAP_ARG_1)
op1S(30, PUSH_INT_P1)
op2S(31, PUSH_INT_P2)
op(32, PUSH_INT_0)
op(33, PUSH_INT_1)
op1(34, PUSH_CHAR)
op1(35, PUSH_CONST_P1)
op2(36, PUSH_CONST_P2)
op(37, PUSH_CONST_0)
op(38, PUSH_CONST_1)
op(39, PUSH_CONST_2)
op(40, PUSH_CONST_3)
op(41, PUSH_CONST_4)
op(42, PUSH_CONST_5)
op(43, PUSH_CONST_6)
op(44, PUSH_CONST_7)
op1(45, MK_AP_P1)
op2(46, MK_AP_P2)
op(47, MK_AP_0)
op(48, MK_AP_1)
op(49, MK_AP_2)
op(50, MK_AP_3)
op(51, MK_AP_4)
op(52, MK_AP_5)
op(53, MK_AP_6)
op(54, MK_AP_7)
op(55, MK_AP_8)
op(56, MK_AP_9)
op(57, MK_AP_10)
op(58, MK_AP_11)
op(59, MK_AP_12)
op(60, MK_AP_13)
op(61, MK_AP_14)
op(62, MK_AP_15)
op1_1(63, MK_PAP_P1)
op2_1(64, MK_PAP_P2)
op1(65, APPLY)
op(66, APPLY_1)
op(67, APPLY_2)
op1(68, MK_CON_P1)
op2(69, MK_CON_P2)
op(70, MK_CON_0)
op(71, MK_CON_1)
op(72, MK_CON_2)
op(73, MK_CON_3)
op(74, UNPACK)
op1(75, SLIDE_P1)
op2(76, SLIDE_P2)
op(77, SLIDE_1)
op(78, SLIDE_2)
op1(79, POP_P1)
op2(80, POP_P2)
op1(81, ALLOC_P1)
op2(82, ALLOC_P2)
op1(83, UPDATE_P1)
op2(84, UPDATE_P2)
op1(85, SELECT_P1)
op2(86, SELECT_P2)
op(87, SELECT_0)
op(88, SELECT_1)
op(89, RETURN)
op(90, EVAL)
op(91, RETURN_EVAL)
opT(92, TABLE_SWITCH)
opL(93, LOOKUP_SWITCH)
opL(94, INT_SWITCH)
opJ(95, JUMP_FALSE)
opJ(96, JUMP)
op(97, ADD_W)
op(98, ADD_F)
op(99, ADD_D)
op(100, SUB_W)
op(101, SUB_F)
op(102, SUB_D)
op(103, MUL_W)
op(104, MUL_F)
op(105, MUL_D)
op(106, DIV_W)
op(107, DIV_F)
op(108, DIV_D)
op(109, MOD_W)
op(110, MOD_F)
op(111, MOD_D)
op(112, EQ_W)
op(113, EQ_F)
op(114, EQ_D)
op(115, NE_W)
op(116, NE_F)
op(117, NE_D)
op(118, LE_W)
op(119, LE_F)
op(120, LE_D)
op(121, LT_W)
op(122, LT_F)
op(123, LT_D)
op(124, GE_W)
op(125, GE_F)
op(126, GE_D)
op(127, GT_W)
op(128, GT_F)
op(129, GT_D)
op(130, NEG_W)
op(131, NEG_F)
op(132, NEG_D)
op(133, STRING)
op(134, FROM_ENUM)
op(135, PRIMITIVE)
op(136, SELECTOR_EVAL)
op(137, EXTERNAL)
op1(138, TAP_P1)
op2(139, TAP_P2)
op1(140, TCON_P1)
op2(141, TCON_P2)
op1(142, TPRIMCON_P1)
op2(143, TPRIMCON_P2)
op1_1(144, TAPPLY_P1)
op2_1(145, TAPPLY_P2)
op1(146, TIF_P1)
op2(147, TIF_P2)
op1(148, TGUARD_P1)
op2(149, TGUARD_P2)
op1(150, TCASE_P1)
op2(151, TCASE_P2)
op1(152, TPRIMAP_P1)
op2(153, TPRIMAP_P2)
op1(154, TPRIMRESULT_P1)
op2(155, TPRIMRESULT_P2)
op(156, TRETURN)
op(157, TPUSH)
op1(158, TPUSHVAR_P1)
op2(159, TPUSHVAR_P2)
op1(160, TPROJECT_P1)
op2(161, TPROJECT_P2)
op1(162, CATCH_BEGIN)
op(163, CATCH_END)
op(164, THROW)
op(165, THROW_TO)
